---
import BaseHead from "./BaseHead.astro";
import Navbar from "./Navbar.astro";
import Sidebar from "./Sidebar.astro";
import { ViewTransitions } from "astro:transitions";
import TableOfContents from "./TableOfContents.astro";

const { title, description, currentPage } = Astro.props;
// URL base fija para el despliegue en GitHub Pages
const baseURL = "/doc-api-facturacion-sv";
---

<html lang="es" class="scroll-smooth">
  <head>
    <BaseHead title={title} description={description} />
    <ViewTransitions />
    <!-- CSS global -->
    <link rel="stylesheet" href="/doc-api-facturacion-sv/styles/global.css" />

    <!-- Prism.js - Resaltado de sintaxis -->
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/themes/prism-okaidia.min.css"
    />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/plugins/line-numbers/prism-line-numbers.min.css"
    />
    <script
      is:inline
      src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/prism.min.js"></script>
    <script
      is:inline
      src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/components/prism-json.min.js"
    ></script>
    <script
      is:inline
      src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/plugins/line-numbers/prism-line-numbers.min.js"
    ></script>
  </head>
  <body
    id="app-body"
    class="min-h-screen bg-white dark:bg-slate-900 text-slate-900 dark:text-white"
  >
    <Navbar />

    <div class="flex flex-col lg:flex-row w-full">
      <!-- Sidebar izquierdo -->
      <aside
        class="w-full lg:w-72 xl:w-80 shrink-0 border-r border-gray-200 dark:border-gray-800 sticky top-16 h-[calc(100vh-4rem)] overflow-y-auto hidden lg:block"
      >
        <Sidebar currentPage={currentPage} />
      </aside>

      <!-- Main content -->
      <main class="flex-1 min-w-0">
        <div class="flex flex-col xl:flex-row">
          <!-- Contenido principal -->
          <div
            class="flex-1 px-4 lg:px-6 py-8 min-w-0 max-w-4xl mx-auto xl:mx-0"
          >
            <slot />
          </div>

          <!-- Tabla de contenidos (derecha) -->
          <div class="w-full xl:w-72 shrink-0 hidden xl:block">
            <div
              class="sticky top-16 pt-8 pr-4 pl-2 h-[calc(100vh-4rem)] overflow-y-auto"
            >
              <TableOfContents />
            </div>
          </div>
        </div>
      </main>
    </div>

    <footer class="border-t border-slate-200 dark:border-slate-700 py-6 mt-8">
      <div
        class="container mx-auto px-4 text-center text-sm text-slate-600 dark:text-slate-400"
      >
        <p>
          © {new Date().getFullYear()} API de Facturación Electrónica. Todos los
          derechos reservados.
        </p>
      </div>
    </footer>

    <script is:inline>
      // Script para manejar el tema
      function getThemePreference() {
        if (
          typeof localStorage !== "undefined" &&
          localStorage.getItem("theme")
        ) {
          return localStorage.getItem("theme");
        }
        return window.matchMedia("(prefers-color-scheme: dark)").matches
          ? "dark"
          : "light";
      }

      function setTheme(theme) {
        if (theme === "dark") {
          document.documentElement.classList.add("dark");
          document.documentElement.classList.remove("light");
        } else {
          document.documentElement.classList.remove("dark");
          document.documentElement.classList.add("light");
        }
        localStorage.setItem("theme", theme);

        // Disparar evento para que otros scripts sepan que el tema ha cambiado
        document.dispatchEvent(
          new CustomEvent("themeChanged", { detail: { theme } })
        );
      }

      // Establecer el tema inmediatamente al cargar
      const theme = getThemePreference();
      // Evita establecer el tema si ya está establecido para prevenir cambios inesperados
      if (
        !document.documentElement.classList.contains("dark") &&
        !document.documentElement.classList.contains("light")
      ) {
        setTheme(theme);
      }

      // Gestionar eventos del botón de cambio de tema
      document.addEventListener("astro:page-load", () => {
        const themeToggle = document.getElementById("theme-toggle");
        if (themeToggle) {
          themeToggle.addEventListener("click", () => {
            const currentTheme = getThemePreference();
            const newTheme = currentTheme === "dark" ? "light" : "dark";
            setTheme(newTheme);
          });
        }

        // Aplicar tema a bloques de código
        const codeBlocks = document.querySelectorAll("pre[class*='language-']");
        const responseBlocks = document.querySelectorAll(".response");
        applyThemeToCodeBlocks(codeBlocks);
        applyThemeToCodeBlocks(responseBlocks);
      });

      function applyThemeToCodeBlocks(elements) {
        const theme = getThemePreference();
        elements.forEach((block) => {
          if (theme === "dark") {
            block.classList.add("dark-theme");
            block.classList.remove("light-theme");
          } else {
            block.classList.add("light-theme");
            block.classList.remove("dark-theme");
          }
        });
      }

      // Escuchar cambios de tema
      document.addEventListener("themeChanged", (e) => {
        const codeBlocks = document.querySelectorAll("pre[class*='language-']");
        const responseBlocks = document.querySelectorAll(".response");
        applyThemeToCodeBlocks(codeBlocks);
        applyThemeToCodeBlocks(responseBlocks);
      });
    </script>
  </body>
</html>
