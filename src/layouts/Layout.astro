---
import "../styles/global.css";
import { ViewTransitions } from "astro:transitions";

interface Props {
  title: string;
  description?: string;
}

const {
  title,
  description = "Documentación de la API de Facturación Electrónica",
} = Astro.props;

// Agregar esta variable para manejar la URL base con path base correcto
const baseURL = "/doc-api-facturacion-sv";
---

<!doctype html>
<html lang="es" class="scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1.0, maximum-scale=5.0"
    />
    <link rel="icon" type="image/svg+xml" href={`${baseURL}/favicon.svg`} />
    <meta name="generator" content={Astro.generator} />
    <link rel="stylesheet" href="/doc-api-facturacion-sv/styles/global.css" />
    <ViewTransitions />
    <title>{title}</title>
    <!-- Inicialización del tema -->
    <script is:inline>
      // Función para obtener la preferencia de tema
      function getThemePreference() {
        // Primero verificar localStorage
        const storedTheme =
          typeof localStorage !== "undefined" && localStorage.getItem("theme");
        if (storedTheme) {
          return storedTheme;
        }

        // Verificar preferencia del sistema
        if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
          return "dark";
        }

        return "dark";
      }

      // Función para establecer el tema
      function setTheme(theme) {
        if (theme === "dark") {
          document.documentElement.classList.add("dark");
          document.documentElement.classList.remove("light");
        } else {
          document.documentElement.classList.add("light");
          document.documentElement.classList.remove("dark");
        }

        // Guardar en localStorage para persistencia
        if (typeof localStorage !== "undefined") {
          localStorage.setItem("theme", theme);
        }

        document.dispatchEvent(
          new CustomEvent("themeChanged", { detail: { theme } })
        );
      }

      // Inicializar el tema basado en la preferencia del usuario
      const theme = getThemePreference();
      setTheme(theme);

      // Exponer funciones globalmente para que otros scripts puedan usarlas
      window.getThemePreference = getThemePreference;
      window.setTheme = setTheme;
    </script>
  </head>
  <body
    class="min-h-screen bg-gray-50 dark:bg-gray-950 text-gray-900 dark:text-gray-100"
  >
    <slot />
  </body>
</html>

<style>
  html,
  body {
    margin: 0;
    width: 100%;
    height: 100%;
    overflow-x: hidden;
  }
</style>
