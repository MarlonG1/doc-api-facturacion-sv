---
import BaseHead from "../components/BaseHead.astro";
import Navbar from "../components/Navbar.astro";
import Sidebar from "../components/Sidebar.astro";
import { ViewTransitions } from "astro:transitions";
import TableOfContents from "../components/TableOfContents.astro";

const { title, description, currentPage } = Astro.props;
// URL base fija para el despliegue en GitHub Pages
const baseURL = "/doc-api-facturacion-sv";
---

<html lang="es" class="scroll-smooth">
  <head>
    <BaseHead title={title} description={description} />
    <ViewTransitions />
    <!-- CSS global -->
    <link rel="stylesheet" href="/doc-api-facturacion-sv/styles/global.css" />

    <!-- Prism.js - Resaltado de sintaxis -->
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/themes/prism-okaidia.min.css"
    />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/plugins/line-numbers/prism-line-numbers.min.css"
    />
    <script
      is:inline
      src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/prism.min.js"></script>
    <script
      is:inline
      src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/components/prism-json.min.js"
    ></script>
    <script
      is:inline
      src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/plugins/line-numbers/prism-line-numbers.min.js"
    ></script>

    <style is:inline>
      /* Estilos personalizados para la barra de desplazamiento */
      ::-webkit-scrollbar {
        width: 6px;
        height: 6px;
      }

      .light ::-webkit-scrollbar-track {
        background: rgba(226, 232, 240, 0.3);
        border-radius: 8px;
      }

      .dark ::-webkit-scrollbar-track {
        background: rgba(30, 41, 59, 0.2);
        border-radius: 8px;
      }

      .light ::-webkit-scrollbar-thumb {
        background: rgba(148, 163, 184, 0.7);
        border-radius: 8px;
        transition: background 0.2s ease;
      }

      .dark ::-webkit-scrollbar-thumb {
        background: rgba(71, 85, 105, 0.7);
        border-radius: 8px;
        transition: background 0.2s ease;
      }

      .light ::-webkit-scrollbar-thumb:hover {
        background: rgba(100, 116, 139, 0.8);
      }

      .dark ::-webkit-scrollbar-thumb:hover {
        background: rgba(100, 116, 139, 0.8);
      }

      ::-webkit-scrollbar-corner {
        background: transparent;
      }

      aside::-webkit-scrollbar {
        width: 5px;
      }

      .light aside::-webkit-scrollbar-thumb {
        background: rgba(148, 163, 184, 0.5);
      }

      .dark aside::-webkit-scrollbar-thumb {
        background: rgba(71, 85, 105, 0.5);
      }

      .light aside::-webkit-scrollbar-thumb:hover {
        background: rgba(100, 116, 139, 0.8);
      }

      .dark aside::-webkit-scrollbar-thumb:hover {
        background: rgba(100, 116, 139, 0.8);
      }

      /* Personalización de colores para bloques de código JSON */

      /* Estilos para modo oscuro */
      .dark pre[class*="language-"],
      .dark code[class*="language-"] {
        background: #192441; /* Azul oscuro coherente con el tema */
        color: #e2e8f0; /* Texto principal en tono claro */
        border-radius: 8px;
        font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas,
          "Liberation Mono", "Courier New", monospace;
      }

      /* Propiedades JSON (keys) - Tono rosa/rojo */
      .dark .token.property {
        color: #f472b6; /* Rosa */
      }

      /* Strings - Verde claro */
      .dark .token.string {
        color: #a3e635; /* Verde lima */
      }

      /* Números, booleanos, null - Azul claro */
      .dark .token.number,
      .dark .token.boolean,
      .dark .token.null {
        color: #60a5fa; /* Azul claro */
      }

      /* Puntuación y símbolos - Gris claro */
      .dark .token.punctuation,
      .dark .token.operator {
        color: #94a3b8; /* Slate 400 */
      }

      /* Estilos para modo claro */
      .light pre[class*="language-"],
      .light code[class*="language-"] {
        background: #f8fafc; /* Fondo muy claro */
        color: #1e293b; /* Texto principal oscuro */
        border: 1px solid #e2e8f0; /* Borde sutil */
        border-radius: 8px;
        font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas,
          "Liberation Mono", "Courier New", monospace;
      }

      /* Propiedades JSON (keys) - Tono rojo oscuro */
      .light .token.property {
        color: #be185d; /* Rosa oscuro */
      }

      /* Strings - Verde oscuro */
      .light .token.string {
        color: #15803d; /* Verde oscuro */
      }

      /* Números, booleanos, null - Azul oscuro */
      .light .token.number,
      .light .token.boolean,
      .light .token.null {
        color: #1d4ed8; /* Azul oscuro */
      }

      /* Puntuación y símbolos - Gris medio */
      .light .token.punctuation,
      .light .token.operator {
        color: #475569; /* Slate 600 */
      }

      /* Ajustes adicionales para líneas numeradas */
      .line-numbers .line-numbers-rows {
        border-right-width: 1px;
      }

      .dark .line-numbers .line-numbers-rows {
        border-right-color: #334155; /* Slate 700 */
      }

      .light .line-numbers .line-numbers-rows {
        border-right-color: #cbd5e1; /* Slate 300 */
      }

      .dark .line-numbers-rows > span:before {
        color: #64748b; /* Slate 500 */
      }

      .light .line-numbers-rows > span:before {
        color: #64748b; /* Slate 500 */
      }

      /* Fondo del código y bordes generales */
      pre[class*="language-"] {
        padding: 1.25rem;
        margin: 1.5rem 0;
        overflow: auto;
      }

      /* Ajuste para el tamaño y fondo de los códigos embebidos en texto */
      :not(pre) > code[class*="language-"] {
        padding: 0.25rem 0.5rem;
        border-radius: 0.25rem;
      }

      /* Ajustes específicos para JSON en la interfaz */
      .language-json .token.property {
        font-weight: 500;
      }

      /* Espaciado y sangrado correcto */
      pre[class*="language-"] {
        tab-size: 2;
      }

      /* Ajustes responsivos para bloques de código */
      @media (max-width: 768px) {
        pre[class*="language-"] {
          padding: 1rem;
          font-size: 0.875rem;
          margin: 1.25rem 0;
        }
      }

      @media (max-width: 640px) {
        pre[class*="language-"] {
          padding: 0.75rem;
          font-size: 0.8125rem;
          margin: 1rem 0;
        }
      }

      /* Eliminar el efecto de fondo alternado en líneas de código */
      pre[class*="language-"] .line {
        background: transparent !important;
      }

      pre[class*="language-"] .line:nth-child(odd),
      pre[class*="language-"] .line:nth-child(even) {
        background: transparent !important;
      }

      .token.operator,
      .token.entity,
      .token.url,
      .language-css .token.string,
      .style .token.string {
        background: transparent !important;
      }

      /* Fondo uniforme para todos los bloques de código */
      .dark pre[class*="language-"] {
        background: #192441 !important; /* Azul oscuro coherente */
      }

      .light pre[class*="language-"] {
        background: #f8fafc !important; /* Fondo muy claro */
      }
    </style>
  </head>
  <body
    id="app-body"
    class="min-h-screen bg-white dark:bg-slate-900 text-slate-900 dark:text-white"
  >
    <Navbar />

    <div class="flex flex-col lg:flex-row w-full">
      <!-- Sidebar izquierdo -->
      <aside
        class="w-full lg:w-72 xl:w-80 shrink-0 border-r border-gray-200 dark:border-gray-800 sticky top-16 h-[calc(100vh-4rem)] overflow-y-auto hidden lg:block"
      >
        <Sidebar currentPage={currentPage} />
      </aside>

      <!-- Main content -->
      <main class="flex-1 min-w-0">
        <div class="flex flex-col xl:flex-row max-w-[1600px] mx-auto">
          <!-- Contenido principal -->
          <div
            class="flex-1 px-4 sm:px-6 lg:px-10 xl:px-8 py-6 sm:py-8 min-w-0 w-full xl:max-w-[calc(100%-18rem)] mx-auto"
          >
            <!-- Botón móvil para mostrar la tabla de contenidos -->
            <div class="mb-6 xl:hidden flex justify-end">
              <button
                id="show-toc-button"
                class="text-sm flex items-center px-3 py-1.5 bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 rounded-md hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  class="h-4 w-4 mr-1.5"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M4 6h16M4 12h16M4 18h7"></path>
                </svg>
                Contenido
              </button>
            </div>

            <!-- Contenido principal de la página -->
            <div
              class="prose prose-slate dark:prose-invert max-w-none prose-headings:scroll-mt-20 prose-img:rounded-xl prose-pre:!bg-transparent"
            >
              <slot />
            </div>
          </div>

          <!-- Tabla de contenidos (derecha) -->
          <div class="w-full xl:w-72 xl:min-w-[18rem] shrink-0 hidden xl:block">
            <div
              class="sticky top-16 pt-8 px-4 mx-auto h-[calc(100vh-4rem)] overflow-y-auto"
            >
              <TableOfContents />
            </div>
          </div>
        </div>
      </main>
    </div>

    <!-- Modal móvil de tabla de contenidos -->
    <div
      id="mobile-toc-modal"
      class="fixed inset-0 z-50 bg-gray-900 bg-opacity-50 hidden"
    >
      <div
        class="w-4/5 max-w-sm h-full overflow-y-auto bg-white dark:bg-gray-900 ml-auto"
      >
        <div
          class="p-4 border-b border-gray-200 dark:border-gray-700 flex justify-between items-center"
        >
          <h3 class="text-base font-semibold text-gray-900 dark:text-white">
            Contenido de la página
          </h3>
          <button
            id="close-toc-button"
            class="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="h-5 w-5"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>
        <div id="mobile-toc-content" class="p-4">
          <!-- El contenido se generará dinámicamente -->
        </div>
      </div>
    </div>

    <footer class="border-t border-slate-200 dark:border-slate-700 py-6 mt-8">
      <div
        class="container mx-auto px-4 text-center text-sm text-slate-600 dark:text-slate-400"
      >
        <p>
          © {new Date().getFullYear()} API de Facturación Electrónica. Todos los
          derechos reservados.
        </p>
      </div>
    </footer>

    <script is:inline src="/doc-api-facturacion-sv/js/theme-handler.js"
    ></script>

    <script is:inline>
      document.addEventListener("astro:page-load", function () {
        // Gestionar botones móviles para tabla de contenidos
        const showTocButton = document.getElementById("show-toc-button");
        const closeTocButton = document.getElementById("close-toc-button");
        const mobileTocModal = document.getElementById("mobile-toc-modal");

        // Función para generar la tabla de contenidos en el modal
        function generateTOC() {
          const modalTocContainer = document.querySelector(
            "#mobile-toc-content"
          );
          if (!modalTocContainer) return;

          // Obtener los encabezados
          const headings = document.querySelectorAll(".prose h2, .prose h3");
          if (headings.length === 0) return;

          // Crear contenedor para el título y la lista
          let tocHTML = `
            <h3 class="text-xs sm:text-sm font-semibold text-gray-900 dark:text-gray-100 mb-3 sm:mb-4 uppercase tracking-wider">
              EN ESTA PÁGINA
            </h3>
            <ul class="modal-toc-list space-y-1 border-l border-gray-200 dark:border-gray-700">
          `;

          // Variables para construir la tabla de contenidos
          let lastH2Item = null;
          let currentH2HTML = "";
          let h3ListHTML = "";

          // Construir la tabla de contenidos
          headings.forEach(function (heading) {
            // Asegurar que tenga un ID
            if (!heading.id) {
              const text = heading.textContent || "";
              heading.id = text
                .toLowerCase()
                .replace(/[^\w\s-]/g, "")
                .replace(/\s+/g, "-");
            }

            const level = parseInt(heading.tagName.substring(1));
            const text = heading.textContent || "";

            if (level === 2) {
              // Si teníamos un H2 anterior con H3s, agregarlo
              if (lastH2Item && h3ListHTML) {
                tocHTML += `
                  <li>
                    ${currentH2HTML}
                    <ul class="mt-1 space-y-1">
                      ${h3ListHTML}
                    </ul>
                  </li>
                `;
              } else if (lastH2Item) {
                // H2 sin H3s
                tocHTML += `<li>${currentH2HTML}</li>`;
              }

              // Crear nuevo H2
              currentH2HTML = `
                <a href="#${heading.id}" 
                   class="block text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 py-1.5 sm:py-2 pl-6 pr-2 border-l-2 transition-colors duration-200 rounded-r-md border-transparent hover:border-blue-500 hover:bg-blue-50 dark:hover:bg-blue-900/10">
                  ${text}
                </a>
              `;
              lastH2Item = heading;
              h3ListHTML = "";
            } else if (level === 3 && lastH2Item) {
              // Agregar H3
              h3ListHTML += `
                <li>
                  <a href="#${heading.id}" 
                     class="block text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 py-1.5 sm:py-2 pl-8 pr-2 border-l-2 transition-colors duration-200 rounded-r-md border-transparent hover:border-blue-500 hover:bg-blue-50 dark:hover:bg-blue-900/10">
                    ${text}
                  </a>
                </li>
              `;
            }
          });

          // Agregar el último H2 si existe
          if (lastH2Item && h3ListHTML) {
            tocHTML += `
              <li>
                ${currentH2HTML}
                <ul class="mt-1 space-y-1">
                  ${h3ListHTML}
                </ul>
              </li>
            `;
          } else if (lastH2Item) {
            tocHTML += `<li>${currentH2HTML}</li>`;
          }

          tocHTML += "</ul>";

          // Establecer el HTML generado
          modalTocContainer.innerHTML = tocHTML;

          // Añadir eventos de clic a los enlaces
          modalTocContainer.querySelectorAll("a").forEach((link) => {
            link.addEventListener("click", function () {
              // Cerrar el modal al hacer clic en un enlace
              mobileTocModal.classList.add("hidden");
              document.body.classList.remove("overflow-hidden");
            });
          });
        }

        if (showTocButton && mobileTocModal && closeTocButton) {
          showTocButton.addEventListener("click", function () {
            // Generar el contenido del TOC
            generateTOC();

            // Mostrar el modal
            mobileTocModal.classList.remove("hidden");
            document.body.classList.add("overflow-hidden");
          });

          closeTocButton.addEventListener("click", function () {
            mobileTocModal.classList.add("hidden");
            document.body.classList.remove("overflow-hidden");
          });

          // Cerrar al hacer clic fuera del modal
          mobileTocModal.addEventListener("click", function (e) {
            if (e.target === mobileTocModal) {
              mobileTocModal.classList.add("hidden");
              document.body.classList.remove("overflow-hidden");
            }
          });
        }
      });

      // También inicializar en la carga inicial
      document.addEventListener("DOMContentLoaded", function () {
        // El mismo código de arriba para la carga inicial
        const showTocButton = document.getElementById("show-toc-button");
        const closeTocButton = document.getElementById("close-toc-button");
        const mobileTocModal = document.getElementById("mobile-toc-modal");

        // Función para generar la tabla de contenidos en el modal
        function generateTOC() {
          const modalTocContainer = document.querySelector(
            "#mobile-toc-content"
          );
          if (!modalTocContainer) return;

          // Obtener los encabezados
          const headings = document.querySelectorAll(".prose h2, .prose h3");
          if (headings.length === 0) return;

          // Crear contenedor para el título y la lista
          let tocHTML = `
            <h3 class="text-xs sm:text-sm font-semibold text-gray-900 dark:text-gray-100 mb-3 sm:mb-4 uppercase tracking-wider">
              EN ESTA PÁGINA
            </h3>
            <ul class="modal-toc-list space-y-1 border-l border-gray-200 dark:border-gray-700">
          `;

          // Variables para construir la tabla de contenidos
          let lastH2Item = null;
          let currentH2HTML = "";
          let h3ListHTML = "";

          // Construir la tabla de contenidos
          headings.forEach(function (heading) {
            // Asegurar que tenga un ID
            if (!heading.id) {
              const text = heading.textContent || "";
              heading.id = text
                .toLowerCase()
                .replace(/[^\w\s-]/g, "")
                .replace(/\s+/g, "-");
            }

            const level = parseInt(heading.tagName.substring(1));
            const text = heading.textContent || "";

            if (level === 2) {
              // Si teníamos un H2 anterior con H3s, agregarlo
              if (lastH2Item && h3ListHTML) {
                tocHTML += `
                  <li>
                    ${currentH2HTML}
                    <ul class="mt-1 space-y-1">
                      ${h3ListHTML}
                    </ul>
                  </li>
                `;
              } else if (lastH2Item) {
                // H2 sin H3s
                tocHTML += `<li>${currentH2HTML}</li>`;
              }

              // Crear nuevo H2
              currentH2HTML = `
                <a href="#${heading.id}" 
                   class="block text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 py-1.5 sm:py-2 pl-6 pr-2 border-l-2 transition-colors duration-200 rounded-r-md border-transparent hover:border-blue-500 hover:bg-blue-50 dark:hover:bg-blue-900/10">
                  ${text}
                </a>
              `;
              lastH2Item = heading;
              h3ListHTML = "";
            } else if (level === 3 && lastH2Item) {
              // Agregar H3
              h3ListHTML += `
                <li>
                  <a href="#${heading.id}" 
                     class="block text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 py-1.5 sm:py-2 pl-8 pr-2 border-l-2 transition-colors duration-200 rounded-r-md border-transparent hover:border-blue-500 hover:bg-blue-50 dark:hover:bg-blue-900/10">
                    ${text}
                  </a>
                </li>
              `;
            }
          });

          // Agregar el último H2 si existe
          if (lastH2Item && h3ListHTML) {
            tocHTML += `
              <li>
                ${currentH2HTML}
                <ul class="mt-1 space-y-1">
                  ${h3ListHTML}
                </ul>
              </li>
            `;
          } else if (lastH2Item) {
            tocHTML += `<li>${currentH2HTML}</li>`;
          }

          tocHTML += "</ul>";

          // Establecer el HTML generado
          modalTocContainer.innerHTML = tocHTML;

          // Añadir eventos de clic a los enlaces
          modalTocContainer.querySelectorAll("a").forEach((link) => {
            link.addEventListener("click", function () {
              // Cerrar el modal al hacer clic en un enlace
              mobileTocModal.classList.add("hidden");
              document.body.classList.remove("overflow-hidden");
            });
          });
        }

        if (showTocButton && mobileTocModal && closeTocButton) {
          showTocButton.addEventListener("click", function () {
            // Generar el contenido del TOC
            generateTOC();

            // Mostrar el modal
            mobileTocModal.classList.remove("hidden");
            document.body.classList.add("overflow-hidden");
          });

          closeTocButton.addEventListener("click", function () {
            mobileTocModal.classList.add("hidden");
            document.body.classList.remove("overflow-hidden");
          });

          // Cerrar al hacer clic fuera del modal
          mobileTocModal.addEventListener("click", function (e) {
            if (e.target === mobileTocModal) {
              mobileTocModal.classList.add("hidden");
              document.body.classList.remove("overflow-hidden");
            }
          });
        }
      });
    </script>
  </body>
</html>
